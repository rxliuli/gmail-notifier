/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RefundRouteImport } from './routes/refund'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LoggedRouteImport } from './routes/logged'
import { Route as IndexRouteImport } from './routes/index'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RefundRoute = RefundRouteImport.update({
  id: '/refund',
  path: '/refund',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LoggedRoute = LoggedRouteImport.update({
  id: '/logged',
  path: '/logged',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/logged': typeof LoggedRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/refund': typeof RefundRoute
  '/settings': typeof SettingsRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/logged': typeof LoggedRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/refund': typeof RefundRoute
  '/settings': typeof SettingsRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/logged': typeof LoggedRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/privacy': typeof PrivacyRoute
  '/refund': typeof RefundRoute
  '/settings': typeof SettingsRoute
  '/terms': typeof TermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/logged'
    | '/login'
    | '/pricing'
    | '/privacy'
    | '/refund'
    | '/settings'
    | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/logged'
    | '/login'
    | '/pricing'
    | '/privacy'
    | '/refund'
    | '/settings'
    | '/terms'
  id:
    | '__root__'
    | '/'
    | '/logged'
    | '/login'
    | '/pricing'
    | '/privacy'
    | '/refund'
    | '/settings'
    | '/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoggedRoute: typeof LoggedRoute
  LoginRoute: typeof LoginRoute
  PricingRoute: typeof PricingRoute
  PrivacyRoute: typeof PrivacyRoute
  RefundRoute: typeof RefundRoute
  SettingsRoute: typeof SettingsRoute
  TermsRoute: typeof TermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/refund': {
      id: '/refund'
      path: '/refund'
      fullPath: '/refund'
      preLoaderRoute: typeof RefundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logged': {
      id: '/logged'
      path: '/logged'
      fullPath: '/logged'
      preLoaderRoute: typeof LoggedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoggedRoute: LoggedRoute,
  LoginRoute: LoginRoute,
  PricingRoute: PricingRoute,
  PrivacyRoute: PrivacyRoute,
  RefundRoute: RefundRoute,
  SettingsRoute: SettingsRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
